"""
Problem 8: 
The four adjacent digits in the $1000$-digit number that have the 
greatest product are 9*9*8*9 = 5832$.
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>
"""

def compute():
  num = """73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450"""
  
  num = ''.join(l.strip(' ') for l in num.splitlines())
  # Nice initial approach but doesnt handle the 0 well.
  # count = 0
  # product = 1
  # while count < 4:
  #   product = product*int(num[count]) 
  #   count += 1
  # print(product)
  # l = 0 
  # for j in range(5, 10001):
  #   if int(num[j]) == 0:
  #     l += 4
  #     j += 4
  #   product = max(product, (product*int(num[j]))//int(num[l]))
  #   l += 1
  # return product
  
  # Much cleaner approach.
  max_product = 0
  for i in range(len(num) - 12):
      # Get the next 13 digits
      digits = num[i:i+13]
      
      # If there's a '0' in this sequence, skip it
      if '0' in digits:
          continue
      
      # Calculate the product
      product = 1
      for digit in digits:
          product *= int(digit)
      
      # Update max_product if necessary
      max_product = max(max_product, product)
  
  return max_product
print(compute())

# Longer but readeable
# res = []
# for line in num.splitlines():
#   line = line.strip(' ')
#   res.append(line)
# print(res)